<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        /* 
            call：
                1.改变函数的this指向到第一个参数
                2.调用函数
                aaaaaaa
                call的第一个参数分为3类 1.window(null,undefined) 2.包装对象（boolean string number） 3.对象类型

        */
        Function.prototype.myCall = function (context) {
            //因为context如果不是一个对象类型，则需要提前处理一下
            if (context === null || context === undefined) {
                //如果context是null或undefined 则把context变成window
                context = window;
            }
            if (typeof context != 'object' && typeof context != "function") {
                //如果context是null或者undefined，则已经被上边的if变成了window
                //如果是object则无法进入if  所以可以进入if的是基本类型值（不包含null和undefined）
                //使用Object()方法可以把基本类型变成包装对象
                context = Object(context);
            }
            //获取给调用myCall的函数传递的参数
            console.log(arguments);
            //不要arguments的第一个值
            //Array.from()方法可以把伪数组转数组
            var argArr = Array.from(arguments).slice(1);
            console.log(argArr);

            //当前myCall的this就是调用myCall的函数，把当前this所代表的的函数fn中的this 指向context
            //把当前myCall的this所代表的函数，当成context对象的方法即可
            //所以给cotext扩展一个方法 值为this代表的函数

            //创建一个独一无二的值
            var f = Date.now().toString(36);
            context[f] = this;

            //只要context调用了f方法，则f的this就指向了context ，因为f和fn是同一个函数，所以fn的this也指向了context
            //eval可以将字符串的代码执行
            eval('context[f](' + argArr.toString() + ')');

            //因为需要，给context扩展了一个f方法 现在f方法已经不用了，则需要删除context的f方法
            delete context[f];



        }

        /* 
            函数： fn
            对象： obj 
            需求：把fn的this指向obj对象
            obj.f = fn;
            obj.f();
        */

        function fn(a, b) {
            console.log(a + b);
            // console.log(this);
            
        }

        // fn.myCall(context);
        fn.myCall(null, 1, 2);
        fn.myCall(undefined, 1, 2);
        fn.myCall(1, 1, 2);
        fn.myCall("12", 1, 2);
        fn.myCall(true, 1, 2);
        fn.myCall(Symbol(), 1, 2);
        fn.myCall(1n, 1, 2);
        fn.myCall(function () { }, 1, 2);
        fn.myCall({}, 1, 2);
        fn.myCall([], 1, 2);
        

        fn.call(null, 1, 2);
        fn.call(undefined, 1, 2);
        fn.call(1, 1, 2);
        fn.call("12", 1, 2);
        fn.call(true, 1, 2);
        fn.call(Symbol(), 1, 2);
        fn.call(1n, 1, 2);
        fn.call(function () { }, 1, 2);
        fn.call({}, 1, 2);
        fn.call([], 1, 2);
                    // eval('alert(1)')
    </script>
</body>

</html>
